= A Test Document

Here, we describe a  document  meant  to  allow  us  to test the program
features. 

That document will be splitted in  three  files, allowing us to test the
file inclusion commands. 

The  first  file  will  be  named   //test//  and  placed  in  a  folder
//tests//. It's title will be  on  more  than  one  line  so that we can
check the frame creation around it. 

<Code (lpm): tests/test
**
* Document's Title:
* This is a Test Document
*
* And it's title is soooo boring!
*
**

>

That file will be  mostly  written  in  Python  (we  don't really care).
It's authors will be Tartempion and Mélanine de Balzac. 

<Code (lpm): tests/test
~Authors Tartempion
~Authors Mélanine de Balzac
~Code python

>

The abstract  will  be  two  lorem  ipsum,  and  one  of  them  will  be
//important//! 

<Code (lpm): tests/test
~abstract~
/!\Lorem     ipsum   dolor   sit amet, consectetur adipiscing elit.
Etiam neque lectus, iaculis vel fringilla varius, molestie vitae lorem.
Nunc sed porttitor orci.  Nullam mattis gravida tellus, et hendrerit
libero porttitor eget. Nam blandit, sapien in molestie suscipit, metus
sapien tincidunt sem, id imperdiet eros orci ac risus. Nunc vel est
enim. Vestibulum blandit, leo ac luctus lobortis, lectus nunc faucibus
nisl, quis interdum augue lectus bibendum orci. Morbi in rutrum ante.
Donec accumsan est vel tellus viverra euismod at eu tortor. Nam justo
ligula, faucibus ac eleifend vitae, dignissim vitae augue. Sed eget urna
venenatis nisi aliquet pulvinar nec eu nulla. Etiam porta placerat nisi
sit amet laoreet. Praesent sollicitudin suscipit vestibulum. Proin non
elementum ipsum. Duis quis risus posuere purus pellentesque placerat in
vitae tortor.  Morbi a massa gravida nibh ullamcorper interdum. Aenean
ac sapien nec sapien pharetra ullamcorper.

Aliquam dictum facilisis enim sit amet convallis. Curabitur placerat
nunc sit amet risus mollis pretium aliquam neque ultrices. Vestibulum
pretium, nisl posuere fringilla semper, eros ipsum congue eros, bibendum
vestibulum mauris orci sit amet diam. Ut sed lectus eget quam tristique
egestas at a justo. Duis in molestie mi. Maecenas viverra adipiscing
nunc, sed facilisis nulla accumsan rutrum. Mauris mattis fermentum nulla
sit amet cursus. Proin purus magna, euismod a condimentum vitae, posuere
sit amet dui. Vivamus molestie lectus non quam viverra non tristique
tellus pellentesque. Proin porta consequat sem eu bibendum. In at magna
nisi.
~~~

>

Then, there will be a section, and a subsection: 

<Code (lpm): tests/test
= Section

Section introduction

== Subsection
>

And that subsection  will  have  subsubsections,  testing  that list are
ok: 

<Code (lpm): tests/test
=== Lists

==== Unordered Lists

- Unordered lists
- Other lists

==== Ordered Lists
You may prefer:
# Ordered lists
# Other lists

==== Nested Lists
Additionally, there are:
- Ordered liss in unordered lists
' # With many elements
' # Like that
- unordered lists in unordered lists
' - With as many elements
' - as in the previous list
# And also unordered lists
' in ordered lists
' - as you can see here
# It may surprise you, but:
' # ordered lists
' ' in ordered lists
# Finally, we would like a very very long element to see how linefeeds (or
' carriage returns) are managed. And that element also has
'
' /!\ an important paragraph!!!

>

We then test references (footnotes and URLs): 

<Code (lpm): tests/test
== References
There are footnotes*, links[..], and (anchored links)[an anchor] that can have
many words.

*: Like that
..: http:/en.wikipedia.org/wiki/Hyperlink

Nulla aliquet adipiscing justo, ultricies blandit erat congue at. Sed
sapien dui, convallis et sollicitudin ac, volutpat ut diam. Cras sed
consequat ipsum.  Sed commodo sodales leo nec tempus. Pellentesque id
nisi dui. Nam in est accumsan odio sagittis scelerisque sed at nibh.
Pellentesque vulputate sodales risus, et auctor erat imperdiet at. Sed
malesuada, nunc vitae faucibus cursus, turpis nulla fringilla sapien,
nec varius nisl dolor a nunc. Vivamus sed tellus tortor, in aliquet
odio.

The anchor send here[=an anchor].

>

We also  present  different  ways  of  formatting  paragraphs  and their
text: 

<Code (lpm): tests/test
== The Look of Paragraphs and Text

/!\ Paragraphs can be formatted to become important. /!\
/!\
/!\ Praesent tincidunt posuere velit. Fusce sed eros sed turpis lacinia
rhoncus. Suspendisse potenti. Nulla feugiat, nisi vitae egestas
tincidunt, tortor sapien porta risus, id scelerisque quam massa a
lectus. Etiam et sapien orci. Donec convallis lorem quis eros tincidunt
rutrum eu sit amet lectus.  Donec eget facilisis nunc. Nulla aliquam
nibh eget dolor vestibulum non placerat lacus aliquet. Curabitur
viverra, quam non luctus porttitor, lacus ipsum egestas risus, et luctus
dui diam et ligula. Quisque nulla augue, semper nec commodo vel,
consequat eget neque. Integer volutpat, mi eget interdum lobortis, lorem
ligula accumsan elit, at imperdiet tellus turpis sit amet justo.

/!\ The two first paragraphs are in on important block, and that one in
another.

Words can be **bold**, //italic//, __underlined__, or --stroke--.

>

We can insert images. To that  end,  we  must  have an image in our test
folder: 
~Copy data/image.jpg tests/image.jpg

<Code (lpm): tests/test
~Image ./image.jpg
>

What about code blocks? 

<Code (lpm): tests/test
= Code

In this part, we mess with the management of the document's code.

\<Code: test.py
""" This code will be extracted in the file test.py, and formatted in Python
"""
def a():
\    <python piece
a()
\>

\<Code: test.py
""" This code will be appended to test.py """
\>

\<Code: test.c
/* This code will be extracted in test.c, but formatted in Python */
\>

\<Code (c): test2.c
/* This code will be extracted in test2.c, and formatted in C */
printf("a line\n");
\>

\<Code: python piece
print "Indentation is preserved."
\>

\<Code:
""" That piece of code display some Python, but is never extracted from the
document.
"""
\>

\<Code (lpm):
\\<Code:
= Explication
Here is how we include a code block:
\\\<Code:
coco
\\\>
A lot of newlines:



\\>
\>
>

Let's see the code remaining commands: 

<Code (lpm): tests/test
The \~Remain command remain us a code chunk, the \~Display command display a
code chunk (in the first case, we display what have already been displayed, in
the second, we display the code as it will be output).

Remain :
~Remain test.py

Display :
~Display test.py
>

We then test in paragraph code: 

<Code (lpm): tests/test
We can put --code blocks **in a** paragraph-- (<import os>), indicate the
language (<<c>#include \<stdio.h\>>), and escape characters used by LPM
(<\<\<python\>--test\>>). We can also end a code quotation with \\ by escaping
it: <test \\>.
>

Finally, we test file inclusion commands: 

<Code (lpm): tests/test
= File Inclusion
We can include files without parsing them:

~Include test2.txt

Or parsing them:

~Get test2.txt

And we can include a file in the generated source code tree:
~Copy image.jpg data/lolcat3\ with\ spaces.jpg

>

We create here our two other  files,  the first one including the second
one, so that we can test recursive inclusions. 

<Code (lpm): tests/test2.txt
===A subsection to include

/!\ With an important paragraph.

~Get test3.txt

>

<Code (lpm): tests/test3.txt
~license~
__**LRL Recursive Licence**__

Copyright Tartempion (c) 1850
Copyright Mélanine de Balzac (c) 1786

Permission is granted to use, copy, modify and/or distribute this work
as long as :

# You follow the license

This license is under LRL Recursive license.
~~~
>

