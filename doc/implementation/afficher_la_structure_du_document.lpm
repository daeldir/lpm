== Afficher la structure du document

Pour  afficher  la  structure  du  document,  nous  allons  utiliser une
fonction d'affichage spéciale.  Cette  fonction  prend trois paramètres.
Ces trois paramètres sont : 
 - l'objet de la structure que l'on va afficher,
 - la profondeur de cet objet,
 - le nom de l'objet, s'il ne correspond pas à celui de la classe.

Le dernier argument est optionnel. 

La fonction va afficher le  nom  de  l'objet,  puis  une série de dièses
indiquant la profondeur de  l'objet,  permettant  de  mettre en avant la
hierarchie  du  document.  Enfin,  elle  affiche  le  texte  contenu  de
l'objet si celui-ci est une  chaîne  de  caractère. La chaine affichée à
l'écran ne  fera  pas  plus  de  la  taille  spécifiée  pour un document
(contenue dans la variable globale <DOCUMENT_WIDTH>). 

<Code: fonctions utilitaires
def print_debug(obj, deep, name = None):
    if name == None:
        name = meta(obj)
    name = name.center(15)
    if meta(obj) in ["str", "unicode"]:
        line = unicode(obj)
    else:
        line = u""
    indent = u"".rjust(deep, "#")
    line = u"[%s]%s%s" % (name, indent, line)
    line = line[:DOCUMENT_WIDTH]
    print line
>

La fonction <meta()>*  permet  de  récupérer  le  nom  de la classe d'un
objet. Pour  ce  faire,  nous  récupérons  la  classe  de  l'objet  avec
l'attribut <\__class__>, et le  nom  de  cette  classe avec son attribut
<\__name__>. 
 *: Le choix du nom //meta// est  dû  au  fait que parmis les trois noms
    trouvés pour cette fonction,  aucun  ne convenait : <class_name> est
    trop long (nous allons  utiliser  cette  fonction ailleurs), <class>
    est  un  mot  reservé,  <name>  est  trop  générique  (utilisé,  par
    exemple, comme argument de  fonctions…).  <meta> permet de connaître
    le nom de la  classe  d'un  objet  en  l'inspectant. On utilise donc
    l'introspection pour connaître  la  nature  de  l'objet. Si //meta//
    n'est pas  le  mot  le  plus  pertinent,  c'est  néanmoins  le  plus
    pratique, sans être totalement hors-sujet.

<Code: fonctions utilitaires
def meta(obj):
    return obj.__class__.__name__

>

<Code: afficher la structure d'un document
print_debug(self, 0)
if self.title != None:
    self.title.print_debug(1)
self.authors.print_debug(1)
print_debug(DOCUMENT_LANGUAGE, 1, "Code Definition")
if self.abstract != None:
    self.abstract.print_debug(1, "Abstract")
for section in self.sections:
    section.print_debug(1)
if self.license != None:
    self.license.print_debug(1, "License")
>

<Code: afficher la structure du titre
print_debug(self, deep)
for line in self.content:
    print_debug(line, deep+1)
>

<Code: afficher la structure des auteurs
print_debug(self, deep)
for authors in self.content:
    print_debug(authors, deep+1)
>

<Code: afficher la structure d'une section
print debug(self, deep)
>

<Code: afficher la structure d'une portion de documentation
print_debug(self, deep, name)
for line in self.lines:
    print_debug(line, deep+1)
>

//La fonction <debug_print()>  de  la  classe  <Documentation>  prend en
paramètre  <name  =   None>.   Ceci   permet   d'afficher   un  bloc  de
documentation en mentant sur le nom,  comme  on a fait avec le résumé et
la licence.// 

