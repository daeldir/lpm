== Structure d'un document

Afin de  comprendre  le  découpage  en  classes  qui  va  suivre, il est
nécessaire de parler  un  peu  de  la  composition  d'un document, et du
processus de  découpage  de  celui-ci  nécessaire  pour  en  extraire la
structure. 

=== Les sections

Nous avons tout d'abord  le  document.  Entier.  Ce document est composé
de plusieurs sections (nous  ne  considérons  ici  que  les sections, et
pas les sous-sections). 

Une section est constituée principalement de cinq choses : 
 - une  section  parente,  qui  permet  de   savoir  à  quel  niveau  de
 ' profondeur nous sommes,
 - un numéro de section,
 - un titre,
 - une introduction,
 - une liste de sous-sections

Chaque section commence par  une  introduction.  Tout le texte précédent
la première sous-section fait  partie  de  l'introduction. Ensuite, nous
regardons chaque sous-section et la  plaçons  dans une liste, qui suivra
l'introduction. 

Les  sous-sections  ne  sont   pas   différentes   des  sections.  Elles
contiennent elles-même une  introduction,  et  d'autre sous-sections, et
ainsi de suite. 

On distingue trois types de sections : 
 - Tout d'abord, le document  lui  même  est  composé comme une section,
 ' c'est à dire  qu'il  contient  une  introduction,  puis  une liste de
 ' sections. La différence  est  qu'en  tant  que **section mère**, elle
 ' contient des  informations  supplémentaires,  telles  que  le  ou les
 ' auteurs  du  document,  le  titre,  le  langage  de  programmation du
 ' projet… Cette section  aura  aussi  un  rendu  différent lorsque nous
 ' générerons la documentation.
 - Ensuite, viennent  les  **sections**  à  proprement parler. Celles-ci
 ' sont telles que décrites  plus  tôt,  composées d'une introduction et
 ' d'une suite de sous-sections.
 - Enfin, il y a  les  **sections  terminales**.  Ces sections n'ont pas
 ' de réelle différence  avec  les  sections,  si  ce  n'est qu'elles ne
 ' contiennent  pas  de  sous-section  –   c'est   à  dire  qu'elles  ne
 ' comportent qu'une introduction.

=== Les introductions

Une fois les sections extraites,  nous  n'avons  plus à nous occuper que
des introductions  de  celles-ci,  les  autres  parties  étant  soit des
sections elles-mêmes, soit déjà analysées. 

Une introduction va contenir  des  paragraphes  de documentation, et des
morceaux de code. Le  traitement  de  ces  deux parties sera extrêmement
différent.  Lors  de  l'analyse,  nous  séparons  donc  ces  parties.  À
l'issue de  l'analyse,  une  introduction  est  composée  d'une suite de
paragraphes  et  de  morceaux  de  code.  Toutefois,  deviner  quand  se
termine et quand commence un  paragraphe  est, au contraire des blocs de
code,  assez   difficile.   Nous   passons   donc   par   une  structure
intermédiaire,  la   **documentation**,   qui   va   contenir  plusieurs
paragraphes, plutôt que  de  découper  les  paragraphes directement dans
l'introduction. 

=== Les blocs de code

Les blocs de codes sont composés  d'une  suite  de lignes de codes et de
références vers d'autres blocs de code.  Un  bloc  de code peut avoir un
nom (pour des références futures)  et  nous pouvons spécifier au cas par
cas le langage de programmation d'un  bloc  de  code (qui par défaut est
celui du projet). 

=== La documentation

La  documentation  est  composée   d'une   suite   de  paragraphes.  Ces
paragraphes peuvent être de plusieurs sorte : 
 - des paragraphes simples,
 - des listes,
 - des paragraphes importants,
 - des notes de bas de page ou des URLs,
 - des commandes.

Une partie de ces types  de  paragraphes  peuvent eux même être composés
de documentation. Par exemple,  un  paragraphe important va contenir une
documentation, ce  qui  lui  permettra  de  contenir  à  sont  tour  des
listes.  Les  listes  elles-même  contiennent  une  documentation,  leur
permettant ainsi  de  contenir  des  sous-listes,  ou  des…  paragraphes
importants. Ou tout simplement,  plusieurs  paragraphes.  La note de bas
de page ne  contient  pas  une  documentation,  mais  un  – et un seul –
paragraphe. 

    /!\ Même  s'il  est  théoriquement  possible  d'insérer  des /!\
    /!\ notes de bas de page,  des  URLs,  ou des commandes dans /!\
    /!\ les   listes   et   les   paragraphes   importants,   le /!\
    /!\ comportement  pourrait  être  imprévisible.  C'est  donc /!\
    /!\ fortement déconseillé. Et  de  toute  façon peu intuitif /!\
    /!\ pour les  futures  lectures,  une  commande étant censée /!\
    /!\ se trouver seule sur une ligne.                          /!\

=== Les paragraphes

Les  paragraphes  sont  des  suites  de  lignes  consécutives.  Ils sont
séparés les uns des autres  par  une  ligne  vide. Ce qui nous intéresse
ici est qu'ils contiennent eux-même  des  éléments de formatage. On peut
considérer qu'un paragraphe contient deux type de donnée : 
 - des morceaux de texte brut,
 - des passages formatés.

Les passages  formatés  peuvent  contenir,  eux  aussi,  des morceaux de
texte brut et des  passages  formatés.  Au  final, cette arborescence de
donnée sera toujours terminée,  à  chaque  //feuille//,  par  un bloc de
texte brut. 

=== Pour résumer

Nous avons donc un  **document**,  contenant des **sections**, contenant
une **introduction** et  des  sous-sections.  L'introduction contient du
**code** (contenant des  **lignes  de  code**  et  des **références vers
des blocs de code**) et  de  la  **documentation**, et celle-ci contient
des **paragraphes**,  des  **listes**,  des  **paragraphes importants**,
des **notes de bas  de  page**,  des  **URLs** et des **commandes**. Les
paragraphes contiennent des  **blocs  de  texte  brut**,  et des **blocs
formatés**. Les autres  éléments  de  la  documentation  contiennent des
paragraphes ou de la documentation. 

Présenté avec plus de formes, voici la structure d'un document : 
 - Document 
 ' - Titre
 ' - Auteurs
 ' - Langage de programmation du projet
 ' - Résumé 
 ' ' - Documentation 
 ' ' ' - Paragraphes 
 ' ' ' ' - Blocs de texte brut
 ' ' ' ' - Blocs de texte formatés 
 ' ' ' ' ' - Blocs de texte brut
 ' ' ' ' ' - Blocs de texte formatés 
 ' ' ' ' ' ' - \[…\]
 ' ' ' - Listes 
 ' ' ' ' - Documentation 
 ' ' ' ' ' - \[…\]
 ' ' ' - Paragraphes importants 
 ' ' ' ' - Documentation 
 ' ' ' ' ' - \[…\]
 ' ' ' - Notes de bas de page 
 ' ' ' ' - Paragraphe 
 ' ' ' ' ' - \[…\]
 ' ' ' - URLs
 ' ' ' - Commandes
 ' - Licence 
 ' ' - Documentation 
 ' ' ' - \[…\]
 ' - Introduction 
 ' ' - Documentations 
 ' ' ' - \[…\]
 ' ' - Codes 
 ' ' ' - Lignes de code
 ' ' ' - Références vers des blocs de code
 ' - Sections 
 ' ' - Nom
 ' ' - Numéro
 ' ' - Parent
 ' ' - Introduction 
 ' ' ' - \[…\]
 ' ' - Sous-sections 
 ' ' ' - \[…\]

    /!\ Ceci ne représente  pas  l'arborescence  des classes. La /!\
    /!\ plupart des éléments présentés  ici  n'ont pas de classe /!\
    /!\ parente commune (à  part  peut-être  <object>), et même, /!\
    /!\ la  classe  <Document>  hérite  de  la  classe <Section> /!\
    /!\ alors  que  notre   arborescence  //montre  l'inverse//. /!\
    /!\ Bref, ne  confondez  pas  l'arborescence  du document et /!\
    /!\ celle des classes.                                       /!\

