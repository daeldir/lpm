= The LPM Markup Language

[Syntax Basics] 

== Syntax Basics

There are many types  of  tags  in  the  LPM language. Lightweight tags,
meant to  format  the  text,  commands,  that  will  execute  actions at
document  generation,  and  block  tags,  enabling  us  to  define  text
blocks. 

=== Blocks

The most basic mean to define a  block  is to left a blank line beetween
to text blocks: 

<Code (lpm): 
Here is a text block.

And a second text block,
spanning two lines.

And a third text block.
>

We  call  those  text  blocks  “paragraphs”.   When  the  file  will  be
formatted, the blocks lines will  be  merged  if  the  result is not too
long.* Thus, the example above will become, after formatting: 

<Code (lpm): 
Here is a text block.

And a second text block, spanning two lines.

And a third text block.
>

The second block is now one single  line.  In contrast, if a line is too
long, a line feed will be added. 

There are other means to define  blocs.  When  we create a list, or when
we insert  a  code  block,  we  create  blocks,  and  their  behavior is
different from the paragraphs one. 
 *: The source file of  the  documentation  is  formatted  to  fit in 72
    columns (72  characters  max  in  a  line).  The  paragraph  text is
    justified. Code blocks are not changed,  even  if they do not fit in
    72 characters.

=== Commands

Commands fit on one line. They  force  the  end  of a paragraph, even if
there is no blank line  beetween  them  and said paragraph. They usually
begin with the character <<lpm>\~>*. A  command  can enable us to define
a document data (source code  language,  authors…),  or to include other
files at this point of the text. Here is an example of commands: 

<Code (lpm): 
~code python

This is a pararaph
~include test.txt
>

In  that  example,  the  paragraph  doesn't  merge  with  the  following
command, even if the line is not  too  long. That is: **a command stay a
command, alone on a line**. 
 *: But not always. Commands  about  references  usually  begin with the
    same symbole as the one used to refer to them.

=== Lightweight Tags

Lightweight tags are tags found inside  lines.  There can be many on one
line. Lightweight tags act  inside  a  paragraph.  The  can  put text in
bold, italic, define links… And  all  of  that without deteriorating the
text with a characters overflow. Here is an example: 

<Code (lpm): 
This is a **bold text** followed by a reference to a footnote.*
>

=== The Simple Form, and the Complete Form of the Language

The markup language's goal  is  to  make  the  source  documents easy to
read. To this  end,  characters  are  used  to  “draw” text decorations.
That way is aesthetic, but not nice  to  write  on our own. So, for some
markup, there is  an  abbreviated  form,  said  “simple”,  that  will be
transformed into the “complete”  form  by  our  program, more pretty. As
an example, we write the book title like that (simple form): 

<Code (lpm): 
**
* A title
**
>

Or, on a more heavy fashion: 

<Code (lpm): 
***********
* A title *
***********
>

And the software will center the title, thus giving us: 

<Code (lpm): 
                             ***********
                             * A title *
                             ***********
>

Those three means of writing a  title  are absolutely equivalent for our
tool, and are only there to make our life easier. 

== Document Structure

A document  as  a  title,  one  or  many  authors,  a  license,  and  an
abstract. In addition to that,  it  is  composed  of many sections, that
structure the document. 

=== The Title

The title is the title of  the  document  (tautology?).  It has to be at
the beginning of the said document.  It  is  written in a star frame. If
it is several lines long, the frame  is  as wide as the widest line, and
other lines are centered. 

<Code (lpm): 
               *****************************************
               *            Document Title             *
               *                                       *
               * This is a test document, with a title *
               *                                       *
               *****************************************
>

It is possible to simplify the  title,  at redaction time, by marking it
as follow: 
 - A line containing  at  least  two  stars,  and  nothing  else (except
 ' maybe  some  spaces  before  and  after  the  line),  will  mark  the
 ' beginning of the title.
 - After that, all lines begin  with  a  star,  then  the text. The last
 ' star of the line is ignored (as  it  is  considered to be part of the
 ' frame). If you want a line  ending  with  a  star (in addition to the
 ' one of the frame), you will have to put two stars.
 - After all these lines, a new  line  containing two stars or more, and
 ' nothing else, mark the end of the title.

So, a simplified title looks like that: 

<Code (lpm): 
**
* Document Title
*
* This is a test document, with a title
*
**
>

=== The Abstract

We begin the  abstract  with  the  command  <<lpm>\~abstract\~>. We then
write a bunch of paragraphs,  then  close  the abstract with the command
<<lpm>\~\~\~>. 

<Code (lpm): 
~abstract~
This is an abstract of our document.

With **two** paragraphs!
~~~
>

Once  formatted,  the  command  <<lpm>\~Abstract\~>  is  centered,  it's
first letter capitalized. The <<lpm>\~\~\~>  that  close the abstract is
centered  too.  The  paragraphs  of   the   abstract  are  shorter,  and
indented, like here: 

<Code (lpm): 
                               ~Abstract~

    This is an abstract of our document.

    With **two** paragraphs!

                                  ~~~
>

=== The License

The license format is  modeled  after  the  abstract  one, but using the
<<lpm>\~License\~> instead of the <<lpm>\~Abstract\~> one. 

<Code (lpm): 
                               ~License~

    __**LRL Recursive License**__

    //Copyright Tartempion © 1842//

    Permission is granted  to  use,  copy, modify and/or distribute
    this work as long as:

     # You follow the license

    This license is under LRL Recursive license.

                                  ~~~
>

=== The Author(s)

We  can  specify   the   authors   of   the   document   thank   to  the
<<lpm>\~authors> command.  That  command  can  appear  many  times,  and
authors will be grouped and  displayed  under  the title. If the command
appear many times, after formatting,  it  will  again appear many times.
We think that if it as  been  typed  more  than  once, there is a reason
and we should not merge the commands. 

<Code (lpm): 
~authors Ludovic Broutille and Mélanine de Balzac.
>

=== The Project Programming Language

Code blocks will  be  inserted  throughout  the  document.  Those can be
prettified  with  syntax  highlighting,   but   only   if  we  know  the
programming language. We can define  that  language  at each code block,
but to save us from typing it  each  time,  we can also specify the more
used language in  the  document.  We  use  the  command <<lpm>\~code> to
that effect. 

<Code (lpm): 
~code haskell
>

== Paragraphs Format

As said in the part  (__Syntax  Basics__)[Syntax Basics], a paragraph is
defined by a sequence of  non  blank  lines.  A  paragraph begins at the
first non blank line encountered, and stop as soon as it encounters: 
 - lines formatted as lists,
 - lines  containing  commands  like  <<lpm>\~include>  (beginning  with
 ' <<lpm>\~>),
 - lines that mark the beginning of a code block,
 - lines that mark a URL or a footnote,
 - lines that mark the beginning of an important paragraph,
 - lines  that  mark  the   beginning   of   a  section  (starting  with
 ' <<lpm>\=>),
 - blank lines.

=== Text Formatting

Inside a paragraph, it is possible  to  use characters that will put our
text in **bold**, //italic//, __underlined__, and --striked--. 

Consequently, the paragraph above looks like that: 

<Code (lpm): 
Inside a paragraph, it is possible  to  use characters that will put our
text in **bold**, //italic//, __underlined__, and --striked--. 
>

=== Links and References

You can also add links to  your  document.  A  link is denoted by square
parentheses, and apply to it's  preceding  word,  or  a group of word if
it is in parentheses (in that  case,  parentheses will not appear in the
generated document). A  link  containing  a  word  is  an intra-document
link. Link to the  outside  world  (internet)  are  denoted by two dots,
and defined at the end  of  the  paragraph with the command <<lpm>\..:>.
Links beginning with <<lpm>\=> are  not  links,  but anchors to which we
can point. Thus, we have: 

<Code (lpm): 
An (outside link)[..], a link to an anchor[an anchor].
..:http://example.org/

Some text.

The anchor[=an anchor] in question.
>

Like the outside links, we can  create  footnotes. To this end, we place
a star (and only one, two  stars  are  to  put text in bold) right after
the word that we want to  comment  on.  The <<lpm>\*:> command will mark
said comment, and be followed on the  same  line  and the next ones by a
paragraph which will be the footnote. 

<Code (lpm): 
My text with* a footnote.
*: //with// is not //whit//.
>

    /!\ To know what footnote or  URL  a reference point to, the /!\
    /!\ software  assign  to  each  footnote  or  URL  a  number /!\
    /!\ (counting  them),  and  a   number  to  each  reference. /!\
    /!\ References to an URL  will  point  to  the  URL with the /!\
    /!\ same number, and it  works  the  same  for footnotes. If /!\
    /!\ you forget a footnote,  there  will  be  a  shift in the /!\
    /!\ references!                                              /!\
    /!\                                                          /!\
    /!\ It is a good idea to  keep  your footnotes and URLs just /!\
    /!\ after the paragraph that  references  them,  but you are /!\
    /!\ not forced to  do  so.  A  note  can  even  precede it's /!\
    /!\ reference, as long  as  the  count  (the  order in which /!\
    /!\ the footnotes  appear)  is  not  changed.  It  would  be /!\
    /!\ unadvised to do so, however…                             /!\

=== Important Paragraphs

It can be useful to  emphasize  an  entire  paragraph, like the last one
in  the  previous  section.  To   that   effect,   we  use  the  command
<<lpm>/!\\>. That command will  take  the  following  paragraph and mark
it as  important.  It  is  possible  to  put  two  paragraph  in  a same
important block, by placing that  command  on  the blank line that split
our two paragraphs. Finally, that  block  (yes,  we are marking a **text
block** as important)  has  a  complete  form:  each  line  of the block
begins and ends with that  command.  Like  for the abstracts and license
blocks, the important  block  will  be  shorter  and  indented. So, that
code: 

<Code (lpm): 
/!\An important
paragraph
/!\
/!\And another important paragraph

/!\The two paragraphs above are in 
one block, and this one in another.
>

Will become: 

<Code (lpm): 
    /!\ An important paragraph                                   /!\
    /!\                                                          /!\
    /!\ And another important paragraph                          /!\

    /!\ The two paragraphs  above  are  in  one  block, and this /!\
    /!\ one in another.                                          /!\
>

== List Formatting

It is possible  to  create  both  numbered  and  non-numbered lists with
LPM. Numbered lists are entered  as  a  sequence on lines beginning with
<<lpm>\#>, each <<lpm>\#>  being  the  beginning  of  an  element of the
list. Non-numbered lists  are  denoted  by  a  <<lpm>\->, each <<lpm>\->
being the beginning of an element of the list. 

If an element of the list  take  more  than  one line, it is possible to
continue on the next  line,  without  beginning  a  new list element, by
starting the line with <<lpm>\'>  rather  than  with <<lpm>\->. In fact,
a line  beginning  by  <<lpm>\#>  or  <<lpm>\->  and  followed  by lines
beginning with <<lpm>\'> becomes, when  that  first column is removed, a
sequence of text blocks,  that  can  be  lists  (and  so, nested lists),
paragraphs… 

<Code (lpm): 
 - A non numbered list
 - A second element

 # A numbered list
 ' whose first element is on many lines
 # The second element embed a non-numbered list
 ' - First element of a nested list
 ' - Second element of a nested list
 ' ' on many lines
 # Third element has many paragraphs
 '
 ' This is the second paragraph of the third element.
>

== File Include Command

Some commands can insert other files  in  the  document. Those take as a
parameter the path and name  of  the  file  to  include, relative to the
position of the file in which the command appears. 

Let's take for example,  to  illustrate  that  idea,  the following file
tree: 
 - document.txt
 - includes 
 ' - duck.txt
 ' - coco.txt

If the file  //document.txt//  wants  to  include  //duck.txt//, it will
use the command  <<lpm>\~get  includes/duck.txt>.  Now,  if //duck.txt//
wants to include  //coco.txt//,  it  will  use  the  command <<lpm>\~get
coco.txt>,  and  not   <<lpm>\~get   includes/coco.txt>.   What  we  are
interested in is the  position  of  the  current  file, not the position
from where the command <<sh>lpm> has been issued. 

We can insert an  image  in  the  documentation  with the <<lpm>\~image>
command: 

<Code (lpm): 
~image img/lolcat.jpg
>

We can also  insert  a  raw  text  file  in  the  documentation with the
<<lpm>\~include> command: 

<Code (lpm): 
~include rfc/rfc1149.txt
>

Finally, we can include a  LPM  file,  which  will be read and formatted
before being added to the documentation: 

<Code (lpm): 
~get part-2.lpm
>

That last command is very important,  because  it enable us to split our
documentation in many smaller files,  easier  to  edit in a text editor.
It also enable us, if we  have  a  file  per section, to create a “table
of content” in the main file,  and  to reorganize the documentation just
by changing the order of the inclusions. 

At last, we'd like to  talk  about  a  command that doesn't, in reality,
include a file in the documentation,  but  in the generated source code.
The command <<lpm>\~copy>. 

<Code (lpm): 
~copy image.jpg data/image.jpg
>

That command takes two files  as  parameters.  It  will copy the file in
the first parameter  (and  whose  position  is  relative  to the current
file), into the file in  the  second  parameter,  whose position will be
relative to the folder in which  will  be placed the source code. Spaces
and other problematic characters should be escaped with <<lpm>\\>. 

== Code Management

=== Defining Code Block

An important functionnality of  the  LPM  language  is the management of
the source code. It is  possible  to  easily  include source code in the
document: 

<Code (lpm): 
\<code:
#include <stdio.c>
void main(){
	printf("Hello, world!\n");
}
\>
>

Which will output: 

<Code: 
#include <stdio.c>
void main(){
	printf("Hello, world!\n");
}
>

Additionally, it is possible  to  specify  the programming language used
in the code block, which enable us to: 
 # specify, for the reader, the language that he is currently reading,
 # apply syntax highlighting to code blocks.

<Code (lpm): 
\<code (haskell):
fibs = 0 : 1 : (zipWith (+) fibs (tail fibs))
fib n = fibs !! n
\>
>

Will become : 

<Code (haskell): 
fibs = 0 : 1 : (zipWith (+) fibs (tail fibs))
fib n = fibs !! n
>

It is also possible to name a code block: 

<Code (lpm): 
\<code (c): test.c
#include <stdio.c>
void main(){
	printf("Hello, world!\n");
}
\>
>

And, finally, it is possible to reference a named code block: 

<Code (lpm): 
\<code (c): test.c
#include <stdio.c>
void main(){
\	<main's implementation
}
\>
>

=== Literate Programming, the Code Web

That  last  functionality  bring  us  to   the  core  idea  of  literate
programming: we  write  small  pieces  of  code,  in  which  we  include
references to other pieces  of  code.  It  is  possible  to begin a code
block, then append later more code  to  that piece, by creating an other
code block with the  same  name.  That  way  of  presenting code, weaved
with references, is not to far  of  the  idea  of the World Wide Web and
it's hyperlinks, and, even  if  literate  programming  predate the World
Wide Web, it's author already had  perceived  that idea of a web created
by the references, and named his invention “web”. 

So, with the following code block collection: 

<Code (lpm): 
\<code (c): test.c
#include <stdio.c>
\>
>

<Code (lpm): 
\<code (c): test.c
void main(){
\	<main's implementation
}
\>
>

<Code (lpm): 
\<code (c): main's implementation
printf("Hello, world!");
\>
>

The code chunk  //test.c//  will  be  reunified,  then  the reference to
//main's implementation // will  be  resolved  and  replaced by the code
so named. All code lines will  be  indented  with has many characters as
the ones preceding the command  referencing  the  block. That feature is
necessary to, first, have  a  readable  source  code output, and second,
support some languages  in  which  indentation  is  meaningful (a python
literate program would be impossible  without  this  feature, as well as
a literate Makefile). 

To output the  source  code,  the  software  will  look  for  code block
names. Those never  referenced  will  be  considered  as  output, and be
placed in files with the name of the code block. 

In the example before, //test.c// is  never  included into an other code
block, so a file  will  be  created  with  this  name. However, //main's
implementation// is inserted into an  other  block,  and  it will not be
output into it's own file.* 
 *: It will be  output,  but  only  because  the  code  that include it,
    //test.c//, is itself output into a file.

=== Piece of Code into the Paragraphs

It is possible to  mark  a  portion  of  paragraph  text as source code.
That allow us to  apply  special  formatting  and syntax highlighting to
the code. We mark a  portion  of  text  as  code  by surrounding it with
angle brackets: <<lpm>\<import  os\>>.  It  is  possible  to specify the
language of the source code  by  adding,  right after the openning angle
bracket, the language  name,  itself  surrounded  by  the same brackets:
<<lpm>\<\<C\>printf("Wouhou!")\>>. 

=== Code Summary

It can be useful to present  the  summary  of  a  code chunk when it has
been wrote  piece  by  piece.  Two  commands  allow  us  to  display the
generated code: 

The first one allow us to  recall  a  code  chunk  as it has been wrote,
but in one piece, even if it was splitted in multiple blocks: 

<Code (lpm): 
~remain code chunk
>

The second one allow  us  to  display  the  code chunk entirely, without
any reference. That is, the code as  it  would  be output into a file if
the chunk name was not referenced anywhere: 

<Code (lpm): 
~display code chunk
>

== Character Escaping

=== In Paragraph Character Escaping

When we use characters  that  should  be  interpreted  by  LPM, but want
them “as is” in the output,  we  have  to  escape them. That is done the
Unix way: every character  preceded  by  <<lpm>\\>  will be rendered “as
is”,  without  being  interpreted.   For  instance,  <<lpm>\\\*\*>  will
display <<lpm>\*\*>. For a  more  complex  instance,  let's  look at the
following code  display:  <<lpm>\<\<C\>printf("Wouhou!")\>>.*  To manage
to print it, we had to escape  every  special character in that piece of
code,  especially  the  <<lpm>\>>  which  would  have  closed  the  code
quotation if it wheren't  for  the  <<lpm>\\>.  Hence,  that code looked
like this: <<lpm>\<\<lpm\>\\\<\\\<C\\\>printf("Wouhou!")\\\>\>>. 
 *: That's a LPM source code, not a C source code.

=== In Code Block Character Escaping

If a code line  begins  with  <<lpm>\<>,  it  will  be  interpreted as a
reference to another code block.  If  it  begins with <<lpm>\>>, it will
be interpreted as the end of  the  code  block.  To prevent this, we can
escape the line, by beginning  it  with  the <<lpm>\\> character. Unlike
the “traditional” escapement  method,  that  character,  in code blocks,
will escape the entire  line,  that  can  then  be composed of anything,
and not just one character. 

So: 

<Code (lpm): 
\<code:
import os
\\<coco
\>
>

Will give: 

<Code (lpm): 
import os
\<coco
>

And to display that code  block,  we  had  to  escape the line beginning
with <<lpm>\\>, //not  by  escaping  the  <<lpm>\\>  character,  but the
entire line//. The used code was that one: 

<Code (lpm): 
\<code (lpm):
\\<code:
import os
\\\<coco
\\>
\>
>

//We  see  here  that  we  only  escaped  the  <<lpm>\\>,  and  not  the
<<lpm>\\\<>, which should  have  been  escaped  <<lpm>\\\\\\\<> (instead
of <<lpm>\\\\\<>) if we had  escaped  character  by character instead of
line by line.// 

