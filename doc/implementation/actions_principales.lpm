== Actions principales du programme

Au lancement,  le programme  analyse  ses  paramètres  pour  savoir quel
fichier il va analyser.  Si aucun paramètre n'a été passé,  le programme
quitte en affichant un  message  d'erreur.  De  même si le fichier passé
en paramètre n'existe pas. 

<Code: actions principales
if len(sys.argv) < 2:
	error(u"Erreur : aucun fichier passé en paramètre")
	sys.exit()

document_file = sys.argv[1]
if not path.exists(document_file):
	error(u"%s n'existe pas." % document_file)
	sys.exit()

>

Nous déterminons maintenant le nom  du document à extraire,  et générons
les chemins de fichier vers  lesquels  nous  extrairons la documentation
et les sources : 

<Code: actions principales
project = path.basename(document_file)
current_dir = os.getcwd()
html_file = path.join(current_dir, project+".html")
ebook_file = path.join(current_dir, project+".ebook_ready.html")

>

//Le fichier  en  //.ebook_ready.html//  permet  de  générer  un fichier
html dont la css est  un peu simplifiée,  afin d'être utilisable pour le
convertir en  ebook  (les  propriétés  modifiant  la  largeur  d'un bloc
passent mal sur les petits écrans).// 

Nous créons un  document  à  partir  du  fichier passé en paramètre.  Ce
fichier est parsé,  reformaté  (ainsi  que  les  fichiers qu'il inclue),
les blocs de codes,  les références  et  la  structure  du document sont
préparés. 

<Code: actions principales
document = Document(document_file)
>

Maintenant, nous extrayons le code, puis la documentation* : 
 *: Les fichiers //.clean// sont générés  dès l'analyse du document,  il
    n'y a pas besoin de les créer explicitement ici.

<Code: actions principales
<extraction du code source
write(html_file, document.output_html())
write(ebook_file, document.output_html(ebook = True))

>

Chaque bloc de  code  nommé  est  retenu dans la variable  <CODE>.  Pour
extraire le code source,  nous parcourons  chaque bloc de code nommé, et
s'il n'a jamais été référencé, nous l'extrayons : 

<Code: extraction du code source
for name in CODE:
    if not CODE[name][0].referenced:
        source_file = path.join(os.getcwd(), "src", name)
        write(source_file, "\n".join(CODE[name][0].resolved))
>

//<CODE\[name\]>  est séparé en  plusieurs  blocs  (quand le même nom de
bloc a été utilisé plusieurs  fois).  Nous  sauvegardons dans le premier
bloc  le  résultat  obtenu  en  résolvant  les  références.  Ce résultat
(<CODE\[name\]\[0\].resolved>)  est retenu en  tant que tableau,  chaque
élément correspondant à une ligne  de  code.  Pour écrire le code source
dans un fichier,  nous joignons  tout  ces  éléments  par un retour à la
ligne (<"\\n".join(list of str)>).// 

Enfin,  nous affichons les  erreurs  que  nous  avons enregistré jusqu'à
maintenant : 

<Code: actions principales
for e in COLOR_ERRORS:
    error(u"Pas de coloration syntaxique pour le langage %s." % e)
for e in CODEREF_ERRORS:
    error(u"<Code: %s n'existe pas." % e)

>

<error>  est une fonction utilitaire affichant  un message sur la sortie
d'erreur. Voici sa définition : 

<Code: fonctions utilitaires
def error(message):
    sys.stderr.write(message+u"\n")

>

Au final,  voici  tout  ce  que  nous  faisons  lorsque  nous lançons le
programme : 
~Display actions principales

