=== La classe Document

la classe  <Document>  est une  sous-classe  de  <Section>,  un document
étant une section qui  a  réussit.  Nous  parlons  d'elle en premier car
c'est la première classe que  nous  utilisons dans le programme.  Ce qui
nous  intéresse  ici  n'est  d'ailleurs  pas  son  travail  en  tant que
section, mais bien son travail en tant que document. 

<Code: classe Document
<classes utiles à la classe Document

class Document(Section):
    def __init__(self, file_name, parse = True):
        Section.__init__(self)
        <variables spécifiques au document
        <à la création d'un document

    def parse(self):
        <extraire les informations spécifiques au document

    def format_text(self):
        <formater un document

    def output_html(self, ebook = False):
        <sortir un document en html

    def print_debug(self):
        <afficher la structure d'un document

>

//La  fonction  d'initialisation  de   la   classe  <Document>  prend un
argument optionnel,  <parse>.  Cet argument est  utilisé par la fonction
elle  même :   au   moment   de   charger   les   fichiers   incluts par
<<lpm>\~Get>,  <\__init\__()> crée un <Document>  et récupère les lignes
qu'il a chargé.  Cette fonction  permet  d'éviter  de parser le document
pour rien (seules les lignes incluses nous intéressent).// 

Notre document  possède  quelques  atout  en  plus  que  la section : un
titre,  des auteurs,  un résumé,  une licence.  Le  titre et les auteurs
sont conservés dans une  classe  sur  mesure,  d'où la référence vers un
bloc de code //classes  utiles  à  la  classe Document//.  Voici comment
sont  initialisées   les   variables   supplémentaires   de   la  classe
Document : 

<Code: variables spécifiques au document
self.title = Title()
self.authors = Authors()
self.abstract = None
self.license = None
>

À la création d'un document, nous faisons plusieurs actions : 
 - tout  d'abord,  nous  cherchons   les   commandes  <<lpm>\~Get>  pour
 ' insérer leur contenu dans le document,*
 - ceci  fait,  nous   analysons   le   document   pour  en  extraire la
 ' structure,
 - enfin,  nous  résolvons  les  références,   c'est  à  dire  que  nous
 ' déterminons  le  nom  des  références  et,   dans  le  cas  du  code,
 ' remplaçons les références par leur contenu.

 *: Nous  désirons,  pour  le  formatage  du  fichier  source  lui même,
    ignorer les  <<lpm>\~Get>.  Pour cette  raison,  nous analysons deux
    fois le fichier.  Une fois sans avoir remplacé les  <<lpm>\~Get>, et
    une fois en l'ayant fait.  Nous  ne résolvons les références qu'à la
    deuxième analyse.

<Code: à la création d'un document
<charger le fichier

<formater le fichier source

<analyser les fichiers inclus

<analyser le document entier
>

Nous  attaquons  ici  véritablement   les   spécificités  de  la  classe
<Document>.  Si vous n'avez pas encore deviné,  voici ce qu'elle fait en
plus que la classe <Section> : 
 - elle charge le fichier  passé  en  paramètre  (et  les fichiers qu'il
 ' inclue),
 - elle extrait le  titre,  le  résumé,  la  licence  et  les auteurs du
 ' document,
 - elle propose un  fichier  source  reformaté  de chaque fichier inclus
 ' et du fichier original, pour une lecture plus agréable.

Après ça, notre classe va se comporter comme une section normale. 

==== Formater le fichier source

Lorsque nous chargeons  un  document,  nous  formatons le fichier source
de ce document et sauvegardons  à  côté  de  celui-ci  le résultat de ce
formatage  (s'il est différent  du  fichier original),  ce qui permettra
de vérifier qu'aucune erreur ne  s'est  glissée  dans le fichier formaté
avant de remplacer le fichier original par celui-ci. 

<Code: formater le fichier source
self.parse()
output_text = self.format_text()
input_text = read(file_name)
if output_text != input_text:
    write(file_name+".clean", output_text)
>

==== Charger le fichier

Nous chargeons le fichier.  Cette  partie  est  assez simple : nous nous
contentons  d'extraire  les  lignes   du   fichier  dans  une  variable,
<self.lines>  (qui est  héritée  de  la classe  <Section>,  voir  (cette
partie)[self.line dans les sections] pour comprendre son usage :) 

<Code: charger le fichier
file_name = path.abspath(file_name)
dir_name = path.dirname(file_name)
self.lines = readlines(file_name)
>

//Nous utilisons le chemin  absolu  vers  le fichier.  Nous en profitons
d'ailleurs pour récupérer le nom  du  dossier dans lequel se situe notre
fichier.// 

Une fois  ces  lignes  chargées,  nous   devons  nous  débrouiller  pour
charger les  fichiers  référencés  dans  ce  fichier,  et en insérer les
lignes dans le document  en  cours.  Pour  compliquer la chose,  si nous
incluons un fichier,  nous voulons que  les  commandes de celui-ci ayant
pour  paramètre  des   noms   de   fichier   soient  modifiées,  afin de
transformer le nom de fichier  relatif  en  nom de fichier absolu : nous
ne connaissons en effet la position  du  fichier  en cours de chargement
que dans cette  partie  du  programme,  mais  nous  devrons  traiter ces
chemins relativement au fichier  en  cours  de  traitement,  ce qui peut
poser des problèmes  si  le  fichier  est  dans  un dossier différent du
répertoire de travail (où la commande a été lancée). 

[=première définition de « ignorer les blocs de code »] 

<Code: analyser les fichiers inclus
new_lines = []
mode = "text"
for line in self.lines:
    <ignorer les blocs de code
    <gérer les ~Get
    <gérer les ~Include et ~Image
    <gérer les ~Copy
    <gérer les autres cas
self.lines = new_lines
>

Ceci fait, nous analysons pour de bon le document : 

<Code: analyser le document entier
if parse:
    global RESOLVE_REFERENCES
    RESOLVE_REFERENCES = True
    self.parse()
    #self.resolv()
>

//Jusqu'à maintenant,  nous  avons  récupéré  des  fichiers  sans jamais
résoudre les références  (certaines références  sont  résolues au moment
du parsing,  et comme nous parsons  le  fichier  deux fois,  nous devons
éviter de commencer à  résoudre  les  références  la première fois).  La
variable  globale  <RESOLVE_REFERENCES>  permet   d'indiquer  que  cette
fois, c'est bon, on doit prendre en compte les références.// 

//Nous ne resolvons pas encore  les référence,  car cette fonction n'est
pas encore implémentée.// 

===== Ignorer les blocs de code

Vous avez pu  remarquer  que  nous  avons  définit une variable  <mode>.
Sont  but  est  simple :  nous   permettre  de  ne  pas  interpréter les
<<lpm>\~Get>  et autres joyeusetés lorsqu'ils  font  partie d'un bloc de
code (les blocs de code ne sont **jamais interprétés**). 

Avant toute chose,  si cette variable contient la chaîne <"code">,  nous
ne faisons qu'une chose : vérifier  si  on  sort de ce mode.  Toutes les
autres actions seront conditionnées par un <elif>  ou un <else>,  ce qui
fait qu'elles ne seront jamais exécutées si le mode est <"code">. 

<Code: ignorer les blocs de code
if mode == "code":
    if line.strip() == ">":
        mode = "text"
    new_lines.append(line)
>

//On sort du mode  <"code">  si la ligne contient juste un <"\>">.  Quoi
qu'il arrive,  nous ajoutons la ligne aux lignes du document final,  car
nous en aurons encore l'usage.// 

Si nous ne sommes pas  encore  en  mode  <"code">,  il faut vérifier que
nous n'y entrons pas : 

<Code: ignorer les blocs de code
elif begin(line, "<code"):
    mode = "code"
    new_lines.append(line)
>

===== Gérer les ~Get

Si la ligne commence par  <<lpm>\~Get>,  nous créons un  <Document>  qui
contient le contenu pointé  par  <<lpm>\~Get>,  puis nous lui « volons »
ses lignes en les insérant  dans  le  document en cours.  Dans le cas où
le fichier n'existe pas, nous affichons une erreur. 

<Code: gérer les ~Get
elif begin(line, "~get"):
    line = line.strip()
    get_file = line[4:].strip()
    get_file_abs = path.join(dir_name, get_file)
    if get_file == "":
        error("Un get n'a pas d'argument.")
    elif not path.exists(get_file_abs):
        error("Fichier non trouvé : %s" % get_file_abs)
    else:
        document = Document(get_file_abs, parse = False)
        new_lines += document.lines
>

//Nous ne faisons que charger  le  fichier pour récupérer ses lignes (et
celles des fichiers qu'il  inclue),  nous pouvons nous passer d'analyser
la structure du  document  que  contient  ce  fichier,  car  nous allons
l'analyser dans le document en  cours.  C'est pour cette raison que nous
passons l'argument  <parse  =  False> :  l'analyse  étant inutile,  nous
gagnons du temps en ne la faisant pas.// 

===== Gérer les ~Include et ~Image

Si la ligne commence par <<lpm>\~Include>  ou <<lpm>\~Image>,  nous nous
contentons de  modifier  le  chemin  d'accès  au  fichier pointé pour le
rendre absolu.  Nous utilisons deux blocs  <elif>,  car vous remarquerez
que les deux commandes ne font  pas  la  même taille,  ce qui est gênant
pour récupérer le chemin de  fichier  (Une solution à base de  <split()>
existe,  mais ne serait intéressante  que  si  nous avions plus de cas à
gérer.  Ici,  l'utiliser reviendrais  à  complexifier  le  système  pour
rien.). 

<Code: gérer les ~Include et ~Image
elif begin(line, "~include"):
    file_path = path.join(dir_name, line[8:].strip())
    new_lines.append("~include "+file_path)
elif begin(line, "~image"):
    file_path = path.join(dir_name, line[6:].strip())
    new_lines.append("~image "+file_path)
>

===== Gérer les ~Copy

Dans  le  cas   de   la   commande   <<lpm>\~Copy>,   elle   est,  comme
<<lpm>\~Get>,  traitée tout  de  suite.  Son  fonctionnement  est un peu
spécial par rapport aux autres  commandes,  car  elle prend en paramètre
deux noms de fichier.  De plus,  la ligne contenant cette commande n'est
pas retenue. 

<Code: gérer les ~Copy
elif begin(line, "~copy"):
    <~Copy: déterminer les fichiers
    <~Copy: le fichier source existe ?
>

Nous commençons par extraire  les  chemins  de  fichier  de la commande.
Ces chemins peuvent  contenir  des  espaces  à  condition  qu'ils soient
échappées  (chaque espace doit être précédé d'un <<lpm>\\>).  //(voir la
fonction <split_path()> (plus loin)[fonction split_path].)// 

<Code: ~Copy: déterminer les fichiers
files = split_path(line[5:].strip())
from_file = path.join(dir_name, files[0])
to_file = path.join(os.getcwd(), "src", files[1])
>

Nous vérifions ensuite que le  fichier à copier existe.  De même pour le
dossier de destination, que nous créons si ce n'est pas le cas. 

<Code: ~Copy: le fichier source existe ?
if not path.exists(from_file):
    error("Fichier non trouvé : %s" % from_file)
else:
    <~Copy: si le fichier source existe
>

<Code: ~Copy: si le fichier source existe
if not path.exists(path.dirname(to_file)):
    os.makedirs(path.dirname(to_file))
>

Maintenant,  que nous savons que le fichier source existe,  ainsi que le
repertoire de destination, nous n'avons plus qu'à copier : 

<Code: ~Copy: si le fichier source existe
write(to_file, read(from_file, None), None)
>

//Les fonctions  <write>  et  <read>  lisent les  fichiers par défaut en
UTF-8.  Comme nous copions  juste  un  fichier binaire,  l'encodage peut
poser problème.  Nous le spécifions donc à  <None>,  ce qui signifie que
l'on ne  gère  pas  l'encodage,  le  fichier  est  donc  copié octet par
octet.// 

Cette partie de code ressemble donc à ceci : 
~Display gérer les ~Copy

Enfin,    nous    avons    utilisé     la    fonction    <split_path()>.
[=fonction split_path] Voici son fonctionnement : 

<Code: fonctions utilitaires
def split_path(line):
    res = []
    escaping = False
    word = u""
    for c in line:
        if escaping: 
            word += c
            escaping = False
        elif c == "\\":
            escaping = True
        elif c == " ":
            res.append(word)
            word = u""
        else:
            word += c
    res.append(word)
    return res

>

//Cette fonction  agit  comme  un  <split("  ")>,  à  ceci  près que les
caractères précédés d'un <<lpm>\\> sont ignorés.// 

===== Gérer les autres cas

Si nous n'avons pas croisé de <<lpm>\~Get>,  <<lpm>\~include>  ou autre,
nous nous contentons d'ajouter la ligne dans les lignes finales : 

<Code: gérer les autres cas
else:
    new_lines.append(line)
>

===== Analyser les fichiers inclus

Voici au final comment nous analysons les fichiers inclus : 
~Display analyser les fichiers inclus

[=fonction begin] 

===== La fonction begin()

La fonction  <begin()>,  utilisée dans les  morceaux  de code précédents
et tout au long  du  programme,  vérifie  si  une  ligne commence par un
texte,  ou par l'un  des  textes  fournits  en  paramètre.  Elle accepte
comme  paramètre  une  chaîne  de  caractères  ou  un tableau.  Voici sa
définition : 

<Code: fonctions utilitaires
def begin(line, texts):
    <begin: gérer deux types de paramètre
    for text in texts:
        <begin: vérifier si la ligne commence par ce texte
    return False

>

//Nous  retournerons  <True>  dans   la   boucle   <for>,  si  le  texte
correspond.  Si nous atteignons la fin  de la boucle,  c'est que rien ne
correspond, nous retournons donc <False>.// 

Pour  gérer  les  deux  types  de  paramètre,  nous  nous  contentons de
vérifier si le paramètre  est  une  chaine de caractère,  et si c'est le
cas, de le remplacer par un tableau contenant seulement cette chaîne. 

<Code: begin: gérer deux types de paramètre
if type(texts) == str:
    texts = [texts]
>

Pour vérifier que  la  ligne  débute  par  le texte,  nous vérifons tout
d'abord qu'elle est plus grande que  ce texte  (elle ne peux pas débuter
par ce texte si elle est plus courte que lui).  Ensuite,  nous comparons
les premiers caractères de la ligne avec le texte : 

<Code: begin: vérifier si la ligne commence par ce texte
line = line.strip().lower()
text = text.strip().lower()
if len(line) >= len(text):
    if line[:len(text)] == text:
        return True
>

//Nous utilisons cette  fonctions  pour  vérifier  qu'une ligne commence
par une commande.  Les  commandes  sont  insensibles  à la casse.  Comme
aucun  autre  cas  demandant  d'être  sensible   à  la  casse  ne  s'est
présenté,  nous nous  épargnons  de  futures  mises  en minuscule en les
pratiquant ici. La même remarque s'applique à propos du <strip()>.// 

Voici la fonction entière : 

<Code: 
def begin(line, texts):
    if type(texts) == str:
        texts = [texts]
    for text in texts:
        line = line.strip().lower()
        text = text.strip().lower()
        if len(line) >= len(text):
            if line[:len(text)] == text:
                return True
    return False
>

==== Récapitulatif de la création d'un document

Pour récapituler, voici ce qui se passe quand on crée un document : 
~Display à la création d'un document

==== Extraire les informations spécifiques au document

Pour  extraire  les  informations   spécifiques   au  document,  nous le
parcourons une fois  en  entier,  lui  tirant  sa substantifique moëlle.
Quand une ligne est spécifique  au document,  nous l'analysons,  et nous
la retirons des lignes connues du  document.  À la fin de cette lecture,
le document  sait  qui  il  est,   ce   qu'il   est,  et  les  lignes ne
contiennent plus que  des  informations  pouvant  être  analysées par la
fonction originale de <Section>. 

<Code: extraire les informations spécifiques au document
new_lines = []
mode = "text"
for line in self.lines:
    <Document.parse: que faire de cette ligne ?
self.lines = new_lines
Section.parse(self)
>

Nous  parcourons  le  document  ligne  par  ligne.  Nous  commençons par
ignorer les blocs de code : 

<Code: Document.parse: que faire de cette ligne ?
<ignorer les blocs de code
>

Pour rappel, voici comment est définit ce bloc de code : 
~Remain ignorer les blocs de code

Il fonctionne  car  nous  utilisons  les  mêmes  variables  que  dans la
méthode[première définition de « ignorer  les  blocs de code »]  où nous
l'avons définit pour la première fois. 

===== Détecter les titres

Si la  ligne  est  composée  d'une   barre   d'étoiles,   il  y  a  deux
solutions : soit nous sommes déjà en  mode titre,  et dans ce cas,  nous
sortons du mode titre,  soit nous sommes dans un autre mode,  auquel cas
nous passons en mode titre. 

<Code: Document.parse: que faire de cette ligne ?
elif star_line(line):
    if mode != "title":
        mode = "title"
    else:
        mode = "text"
>

La fonction star_line est une  fonction  utilitaire  qui prend une ligne
comme  paramètre,  et  retourne  <True>  si  cette  ligne  est  composée
uniquement d'étoiles, optionellement entourée d'espaces : 

<Code: fonctions utilitaires
def star_line(line):
    line = line.strip()
    if len(line) < 2:
        return False
    for c in line:
        if c != "*":
            return False
    return True

>

//Nous commençons par retirer les  espaces  aux  extrémités de la ligne.
Ensuite,  si la ligne fait  moins  de deux caractères,  elle ne peut pas
contenir  une  ligne  d'étoiles   (il   faut   au   moins  deux  étoiles
consécutives).  Pour finir,  nous vérifions  que  tout les caractères de
la ligne sont des  étoiles.  Si  ce  n'est  pas le cas,  nous retournons
<False>, sinon, notre ligne est bien une ligne d'étoiles.// 

Si nous sommes en  mode  titre,  nous  ajoutons  la  ligne aux lignes de
<self.title>.  Pour  rappel,  <self.title>  a  été  initialisé comme une
instance  de  la  classe  <Title>.  Cette  classe  contient  une méthode
nommée  <add_line(line)>,  qui prend en paramètre  la ligne à ajouter et
l'analyse. Ajouter notre ligne au titre est donc très simple : 

<Code: Document.parse: que faire de cette ligne ?
elif mode == "title":
    self.title.add_line(line)
>

Il est maintenant temps de  vous  décrire la classe  <Title>,  qui n'est
utilisée qu'ici,  et au  moment  de  générer la documentation  (voir les
sections correspondantes). 

<Code: classes utiles à la classe Document
class Title:
    def __init__(self):
        self.content = []

    def important(self):
        <classe Title: est elle importante ?

    def add_line(self, line):
        <classe Title: ajouter une ligne

    def format_text(self):
        <formater le titre

    def output_html(self):
        <sortir le titre en HTML

    def output_html_title(self):
        <sortir le titre en HTML (élément <title>)

    def print_debug(self, deep):
        <afficher la structure du titre


>

Cette classe contient uniquement  un tableau,  contenant chaque ligne du
titre.     Les     fonctions     <format_text()>,     <output_html()> et
<output_html_title()>  sont utilisées lors  du  formatage du document et
de la génération de la documentation  et  seront décrites plus tard.  La
fonction <add_line> prend une ligne en paramètre,  l'analyse,  et stocke
la ligne  dans  la  variable   <self.content>.   La  ligne  passée  peut
commencer  par  une  étoile,  et/ou   finir  par  une  étoile.  Nous les
supprimons si c'est le cas.  Nous  supprimons aussi les espaces avant et
après ces étoiles. Ce qui donne comme fonction : 

<Code: classe Title: ajouter une ligne
line = line.strip()
if len(line) > 0 and line[0] == "*":
    line = line[1:]
if len(line) > 0 and line[-1] == "*":
    line = line[:-1]
line = line.strip()
self.content.append(line)
>

//Nous  devons  vérifier  que  la  ligne   n'est  pas  vide  avant  d'en
supprimer une étoile,  sans quoi  nous risquons d'essayer d'accéder à un
caractère qui n'est pas dans la chaîne (puisque la ligne est vide).// 

La fonction  <important()>  est utilisée lors de l'affichage,  mais nous
la définissons  ici,  car  elle   est   assez  simple.  Elle  consiste à
vérifier si le titre est bien  rempli.  Si  le titre ne contient que des
lignes  vides,  il  n'est  pas   important  et  nous  n'aurons  jamais à
l'afficher.   Cette   fonction   renvoie    <True>   si   le   titre est
« important », <False> sinon. 

<Code: classe Title: est elle importante ?
for line in self.content:
    if line != "":
        return True
return False
>

===== Détecter le résumé et la licence

Le résumé comme la licence sont  stockés  dans une instance de la classe
<Documentation>  (voir   (ici)[classe   documentation]).   Lorsque  nous
sommes en mode licence ou  en mode résumé,  nous ajoutons chaque ligne à
la licence/au résumé,  sauf si  la ligne est  <<lpm>\~\~\~>,  auquel cas
nous repassons en mode normal. 

<Code: Document.parse: que faire de cette ligne ?
elif mode in ["license", "abstract"]:
    if line.split == "~~~":
        self.mode = "text"
    elif mode == "license":
        self.license.add_line(line)
    elif mode == "abstract":
        self.abstract.add_line(line)
>

On gère maintenant le passage dans ces deux modes : 

<Code: Document.parse: que faire de cette ligne ?
elif begin(line, "~license~"):
    mode = "license"
    self.license = Documentation()
elif begin(line, "~abstract~"):
    mode = "abstract"
    self.abstract = Documentation()
>

//Lorsque nous  passons  en  mode  licence  ou  résumé,  nous créons une
portion de documentation pour en accueillir le contenu.// 

===== Détecter les auteurs

Comme pour le titre,  une  classe  spéciale  a  été écrite pour contenir
les auteurs.  Quand une  ligne commence par  <<lpm>\~Authors>,  elle est
passée à cette classe  qui  retient  cette  ligne après l'avoir nettoyée
de cet inévitable <<lpm>\~Authors> : 

<Code: Document.parse: que faire de cette ligne ?
elif begin(line, "~authors"):
    self.authors.add_line(line)
>

La classe <Authors> est définie ainsi : 

<Code: classes utiles à la classe Document
class Authors:
    def __init__(self):
        self.content = []

    def add_line(self, line):
        line = line.strip()[8:].strip()
        self.content.append(line)

    def format_text(self):
        <formater les balises des auteurs

    def output_html(self):
        <sortir les auteurs en HTML

    def output_html_meta(self):
        <sortir les auteurs en HTML (balise <meta>)

    def print_debug(self, deep):
        <afficher la structure des auteurs

>

//La  méthode   <add_line>   enlève   les   huit   premiers   caractères
significatifs de la ligne  (ils contiennent <<lpm>\~Authors>)  et ajoute
la ligne au contenu de  la  classe,  qui  retient  donc tout les auteurs
définits.// 

===== Détecter le langage du document

La dernière information  à  extraire  est  le  langage  de programmation
principal du document.  Ce langage est  stocké  dans la variable globale
<DOCUMENT_LANGUAGE>. 

<Code: Document.parse: que faire de cette ligne ?
elif begin(line, "~code"):
    global DOCUMENT_LANGUAGE
    DOCUMENT_LANGUAGE = line.strip()[5:].strip()
>

===== Retenir les autres lignes

Nous terminons cette portion de  code  en  retenant les lignes qui n'ont
pas été gérées : elles ne  font  pas  partie  des attributs du document,
mais de la section. 

<Code: Document.parse: que faire de cette ligne ?
else:
    new_lines.append(line)
>

===== Résumé

Voici  au  final  à   quoi   ressemble   la   fonction  qui  extrait les
informations spécifiques au document : 
~Display extraire les informations spécifiques au document

